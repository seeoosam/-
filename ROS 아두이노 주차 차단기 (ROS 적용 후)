#include <ros.h> //아두이노에서 ros를 사용할 수 있게 해주는 헤더파일
#include <std_msgs/Float64.h> //메시지를 위한 헤더파일
#include<Servo.h>
Servo myservo;

ros::NodeHandle nh; //publisher, subscriber 사용 및 노드 시리얼 통신 위해 노드핸들 필요
std_msgs::Float64 Distance; //Distance라는 이름의 메시지를 Float64 형태로 설정
ros::Publisher chatter("chatter", &Distance); //토픽 이름 chatter로 설정, 메시지 인스턴스에 대한 참조를 포함하는 발행자 객체 만듦

// defines pins numbers
const int trigPin = 13;
const int echoPin = 12;

// defines variables
long duration;
float distance;

void setup() {
  nh.initNode(); //노드 핸들 초기화
  nh.advertise(chatter); //chatter토픽 publish
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  Serial.begin(57600); //기본적으로 baud rate가 57600으로 설정되어있으므로 해당 숫자를 써넣어줬다.
}

void loop() {
  int angle;
  // Clears the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);

  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);

  // Calculating the distance
  distance = duration * 0.034 / 2;



  Distance.data = distance; //위에서 계산한 거리값을 Distance 데이터에 저장
  chatter.publish(&Distance); //chatter 발행자가 'chatter' 토픽으로 str_msg를 publish하도록 함
  nh.spinOnce(); //콜백함수 호출을 위한 함수, 메시지 수신 대기
  // Prints the distance on the Serial Monitor
  Serial.println(duration ); //초음파가 반사되어 돌아오는 시간을 보여줍니다.
  Serial.print("\n거리: ");
  Serial.print(distance); //측정된 물체로부터 거리값(cm값)을 보여줍니다.
  Serial.println(" Cm");
  delay(1000); //1초마다 측정값을 보여줍니다.

  if (distance < 20) {  // 거리가 15cm 미만일 때
    myservo.attach(9);
    myservo.write(5);
    delay(100);
    myservo.write(10);
    delay(100);
    myservo.write(15);
    delay(100);
    myservo.write(20);
    delay(100);
    myservo.write(25);
    delay(100);
    myservo.write(30);
    delay(100);
    myservo.write(35);
    delay(100);
    myservo.write(40);
    delay(100);
    myservo.write(45);  // 서보모터 제어
    delay(100);
    myservo.write(50);
    delay(100);
    myservo.write(55);
    delay(100);
    myservo.write(60);
    delay(100);
    myservo.write(65);
    delay(100);
    myservo.write(70);
    delay(100);
    myservo.write(75);
    delay(100);
    myservo.write(80);
    delay(100);
    myservo.write(85);
    delay(100);
    myservo.write(90);  // 서보모터 제어
    Serial.println("OPEN");
    delay(2000);
  }
  else {
    myservo.write(0);  // 서보모터 제어
  }
}
